<?php

/**
 * @file
 * Install, update and uninstall functions for the Entity Share Client module.
 */

declare(strict_types = 1);

use Drupal\Core\Config\Entity\ConfigEntityType;
use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\entity_share_client\ClientAuthorization\ClientAuthorizationInterface;
use Drupal\entity_share_client\Entity\Remote;

/**
 * Implements hook_uninstall().
 */
function entity_share_client_uninstall() {
  // Delete remote websites locally stored authentication credentials.
  $key_value_store = \Drupal::keyValue(ClientAuthorizationInterface::LOCAL_STORAGE_KEY_VALUE_COLLECTION);
  $key_value_store->deleteAll();
}

/**
 * Install the "Entity import status" entity type.
 */
function entity_share_client_update_8301() {
  \Drupal::entityDefinitionUpdateManager()->installEntityType(new ContentEntityType([
    'id' => 'entity_import_status',
    'label' => new TranslatableMarkup('Entity import status'),
    'base_table' => 'entity_import_status',
    'entity_keys' => [
      'id' => 'id',
      'langcode' => 'langcode',
    ],
  ]));
}

/**
 * Install the "Import config" entity type.
 */
function entity_share_client_update_8302() {
  \Drupal::entityDefinitionUpdateManager()->installEntityType(new ConfigEntityType([
    'id' => 'import_config',
    'label' => new TranslatableMarkup('Import config'),
    'entity_keys' => [
      'id' => 'id',
      'label' => 'label',
      'uuid' => 'uuid',
    ],
  ]));
}

/**
 * Move any basic auth credentials stored in configuration into the new plugin.
 */
function entity_share_client_update_8201() {
  /** @var \Drupal\entity_share_client\ClientAuthorization\ClientAuthorizationPluginManager $manager */
  $manager = \Drupal::service('plugin.manager.entity_share_client_authorization');
  $state = \Drupal::state();
  // Iterate on remotes.
  /** @var \Drupal\entity_share_client\Entity\RemoteInterface[] $remotes */
  $remotes = Remote::loadMultiple();
  foreach ($remotes as $remote) {
    if (!empty($remote->get('basic_auth_username'))
      && !empty($remote->get('basic_auth_password'))
    ) {
      /** @var \Drupal\entity_share_client\Plugin\ClientAuthorization\BasicAuth $plugin */
      $plugin = $manager->createInstance('basic_auth');
      $configuration = $plugin->getConfiguration();
      // For the update. Init plugin UUID with the same UUID as the remote
      // entity.
      $configuration['uuid'] = $remote->uuid();
      $credentials = [];
      $credentials['username'] = $remote->get('basic_auth_username');
      $credentials['password'] = $remote->get('basic_auth_password');
      $state->set($configuration['uuid'], $credentials);
    }
    else {
      /** @var \Drupal\entity_share_client\Plugin\ClientAuthorization\Anonymous $plugin */
      $plugin = $manager->createInstance('anonymous');
      $configuration = $plugin->getConfiguration();
      // For the update. Init plugin UUID with the same UUID as the remote
      // entity.
      $configuration['uuid'] = $remote->uuid();
    }

    unset($remote->basic_auth_username);
    unset($remote->basic_auth_password);
    $configuration['data'] = [
      'credential_provider' => 'entity_share',
      'storage_key' => $configuration['uuid'],
    ];
    $plugin->setConfiguration($configuration);
    $remote->mergePluginConfig($plugin);
    $remote->save();
  }
}
